"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runTestsParallel = exports.runTests = void 0;
const node_process_1 = require("process");
const node_path_1 = require("path");
const get_runner_js_1 = require("../parsers/get-runner.js");
const indentation_js_1 = require("../configs/indentation.js");
const list_files_js_1 = require("../modules/helpers/list-files.js");
const write_js_1 = require("../services/write.js");
const format_js_1 = require("./format.js");
const run_test_file_js_1 = require("./run-test-file.js");
const output_js_1 = require("../parsers/output.js");
const poku_js_1 = require("../configs/poku.js");
const cpus_js_1 = require("../polyfills/cpus.js");
const cwd = (0, node_process_1.cwd)();
const runTests = async (dir, configs) => {
    const testDir = (0, node_path_1.join)(cwd, dir);
    const currentDir = (0, node_path_1.relative)(cwd, testDir);
    const isFile = await (0, list_files_js_1.isFile)(testDir);
    const files = await (0, list_files_js_1.listFiles)(testDir, configs);
    const totalTests = files.length;
    const showLogs = !(0, output_js_1.isQuiet)(configs);
    let passed = true;
    if (showLogs && files.length > 0) {
        write_js_1.Write.hr();
        write_js_1.Write.log(`${(0, format_js_1.format)(isFile ? 'File:' : 'Directory:').bold()} ${(0, format_js_1.format)(`.${node_path_1.sep}${currentDir}`).underline()}\n`);
    }
    for (let i = 0; i < files.length; i++) {
        const filePath = files[i];
        const fileRelative = (0, node_path_1.relative)(cwd, filePath);
        const start = (0, node_process_1.hrtime)();
        const testPassed = await (0, run_test_file_js_1.runTestFile)(filePath, configs);
        const end = (0, node_process_1.hrtime)(start);
        const total = (end[0] * 1e3 + end[1] / 1e6).toFixed(6);
        const testNumber = i + 1;
        const counter = (0, format_js_1.format)('').counter(testNumber, totalTests);
        const command = `${(0, get_runner_js_1.runner)(fileRelative, configs).join(' ')} ${fileRelative}`;
        const nextLine = i + 1 !== files.length ? '\n' : '';
        const log = `${counter}/${totalTests} ${command}`;
        if (testPassed) {
            ++poku_js_1.results.success;
            showLogs &&
                write_js_1.Write.log(`${indentation_js_1.indentation.test}${(0, format_js_1.format)('✔').success()} ${log}${(0, format_js_1.format)(` › ${total}ms`).success().dim()}${nextLine}`);
        }
        else {
            ++poku_js_1.results.fail;
            if (showLogs) {
                write_js_1.Write.log(`${indentation_js_1.indentation.test}${(0, format_js_1.format)('✘').fail()} ${log}${(0, format_js_1.format)(` › ${total}ms`).fail().dim()}${nextLine}`);
            }
            passed = false;
            if (configs === null || configs === void 0 ? void 0 : configs.failFast) {
                if (showLogs) {
                    write_js_1.Write.hr();
                    write_js_1.Write.log(`  ${(0, format_js_1.format)('ℹ').fail()} ${(0, format_js_1.format)('fail-fast').bold()} is enabled`);
                }
                break;
            }
        }
    }
    return passed;
};
exports.runTests = runTests;
const runTestsParallel = async (dir, configs) => {
    var _a;
    const testDir = (0, node_path_1.join)(cwd, dir);
    const files = await (0, list_files_js_1.listFiles)(testDir, configs);
    const filesByConcurrency = [];
    const concurrencyLimit = (_a = configs === null || configs === void 0 ? void 0 : configs.concurrency) !== null && _a !== void 0 ? _a : Math.max((0, cpus_js_1.availableParallelism)() - 1, 1);
    const concurrencyResults = [];
    const showLogs = !(0, output_js_1.isQuiet)(configs);
    if (concurrencyLimit > 0) {
        for (let i = 0; i < files.length; i += concurrencyLimit) {
            filesByConcurrency.push(files.slice(i, i + concurrencyLimit));
        }
    }
    else {
        filesByConcurrency.push(files);
    }
    try {
        for (const fileGroup of filesByConcurrency) {
            const promises = fileGroup.map(async (filePath) => {
                const testPassed = await (0, run_test_file_js_1.runTestFile)(filePath, configs);
                if (!testPassed) {
                    ++poku_js_1.results.fail;
                    if (configs === null || configs === void 0 ? void 0 : configs.failFast) {
                        throw new Error(`  ${(0, format_js_1.format)('ℹ').fail()} ${(0, format_js_1.format)('fail-fast').bold()} is enabled`);
                    }
                    return false;
                }
                ++poku_js_1.results.success;
                return true;
            });
            const concurrency = await Promise.all(promises);
            concurrencyResults.push(concurrency);
        }
        return concurrencyResults.every((group) => group.every((result) => result));
    }
    catch (error) {
        if (showLogs) {
            write_js_1.Write.hr();
            error instanceof Error && console.error(error.message);
        }
        return false;
    }
};
exports.runTestsParallel = runTestsParallel;

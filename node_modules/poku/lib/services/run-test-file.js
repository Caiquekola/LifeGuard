"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runTestFile = void 0;
const node_process_1 = require("process");
const node_path_1 = require("path");
const node_child_process_1 = require("child_process");
const indentation_js_1 = require("../configs/indentation.js");
const files_js_1 = require("../configs/files.js");
const get_runner_js_1 = require("../parsers/get-runner.js");
const format_js_1 = require("./format.js");
const output_js_1 = require("../parsers/output.js");
const each_js_1 = require("./each.js");
const write_js_1 = require("./write.js");
const cwd = (0, node_process_1.cwd)();
const runTestFile = async (filePath, configs) => {
    var _a, _b;
    const runtimeOptions = (0, get_runner_js_1.runner)(filePath, configs);
    const runtime = runtimeOptions.shift();
    const runtimeArguments = [
        ...runtimeOptions,
        
        ((_a = configs === null || configs === void 0 ? void 0 : configs.deno) === null || _a === void 0 ? void 0 : _a.cjs) === true ||
            (Array.isArray((_b = configs === null || configs === void 0 ? void 0 : configs.deno) === null || _b === void 0 ? void 0 : _b.cjs) &&
                configs.deno.cjs.some((ext) => filePath.includes(ext)))
            ? 'https://cdn.jsdelivr.net/npm/poku/lib/polyfills/deno.mjs'
            : filePath,
    ];
    const fileRelative = (0, node_path_1.relative)(cwd, filePath);
    const showLogs = !(0, output_js_1.isQuiet)(configs);
    let output = '';
    const stdOut = (data) => {
        output += String(data);
    };
    if (!(configs === null || configs === void 0 ? void 0 : configs.parallel)) {
        showLogs &&
            write_js_1.Write.log(`${indentation_js_1.indentation.test}${(0, format_js_1.format)('●').info().dim()} ${(0, format_js_1.format)(fileRelative).dim()}`);
    }
    const start = (0, node_process_1.hrtime)();
    let end;
    if (!(await (0, each_js_1.beforeEach)(fileRelative, configs))) {
        return false;
    }
    return new Promise((resolve) => {
        var _a;
        const child = (0, node_child_process_1.spawn)(runtime, runtimeArguments, {
            stdio: ['inherit', 'pipe', 'pipe'],
            shell: get_runner_js_1.isWindows,
            env: {
                ...node_process_1.env,
                FILE: (configs === null || configs === void 0 ? void 0 : configs.parallel) || ((_a = configs === null || configs === void 0 ? void 0 : configs.deno) === null || _a === void 0 ? void 0 : _a.cjs) ? fileRelative : '',
            },
        });
        child.stdout.on('data', stdOut);
        child.stderr.on('data', stdOut);
        child.on('close', async (code) => {
            end = (0, node_process_1.hrtime)(start);
            const result = code === 0;
            if (showLogs) {
                const mappedOutputs = (0, output_js_1.parserOutput)({
                    output,
                    result,
                    configs,
                });
                mappedOutputs && write_js_1.Write.log(mappedOutputs.join('\n'));
            }
            if (!(await (0, each_js_1.afterEach)(fileRelative, configs))) {
                resolve(false);
                return;
            }
            const total = (end[0] * 1e3 + end[1] / 1e6).toFixed(6);
            if (result) {
                files_js_1.fileResults.success.set(fileRelative, total);
            }
            else {
                files_js_1.fileResults.fail.set(fileRelative, total);
            }
            resolve(result);
        });
        
        child.on('error', (err) => {
            end = (0, node_process_1.hrtime)(start);
            const total = (end[0] * 1e3 + end[1] / 1e6).toFixed(6);
            console.error(`Failed to start test: ${filePath}`, err);
            files_js_1.fileResults.fail.set(fileRelative, total);
            resolve(false);
        });
    });
};
exports.runTestFile = runTestFile;

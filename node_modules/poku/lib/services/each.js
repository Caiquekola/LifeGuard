"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.afterEach = exports.beforeEach = void 0;
const format_js_1 = require("./format.js");
const write_js_1 = require("../services/write.js");
const output_js_1 = require("../parsers/output.js");
const eachCore = async (type, fileRelative, configs) => {
    if (typeof (configs === null || configs === void 0 ? void 0 : configs[type]) !== 'function') {
        return true;
    }
    const cb = configs[type];
    const showLogs = !(0, output_js_1.isQuiet)(configs);
    const cbName = cb.name !== type ? cb.name : 'anonymous function';
    showLogs &&
        write_js_1.Write.log(`    ${(0, format_js_1.format)('◯').dim().info()} ${(0, format_js_1.format)(`${type}: ${cbName}`)
            .dim()
            .italic()}`);
    try {
        await cb();
        return true;
    }
    catch (error) {
        if (showLogs) {
            write_js_1.Write.log((0, format_js_1.format)(`    ✘ ${type} callback failed ${(0, format_js_1.format)(`› ${cbName}`).dim()}`)
                .fail()
                .bold());
            write_js_1.Write.log((0, format_js_1.format)(`      ├─ Who's trying to run this ${type}?`).fail());
            write_js_1.Write.log((0, format_js_1.format)(`      │ └─ ${(0, format_js_1.format)(fileRelative).fail().underline()}`).fail());
            if (error instanceof Error) {
                write_js_1.Write.log((0, format_js_1.format)('      ├─ Message:').fail());
                write_js_1.Write.log((0, format_js_1.format)(`      │ └─ ${error.message}`).fail());
            }
        }
        return false;
    }
};
const beforeEach = async (fileRelative, configs) => {
    if (configs === null || configs === void 0 ? void 0 : configs.beforeEach) {
        return await eachCore('beforeEach', fileRelative, configs);
    }
    return true;
};
exports.beforeEach = beforeEach;
const afterEach = async (fileRelative, configs) => {
    if (configs === null || configs === void 0 ? void 0 : configs.afterEach) {
        return await eachCore('afterEach', fileRelative, configs);
    }
    return true;
};
exports.afterEach = afterEach;

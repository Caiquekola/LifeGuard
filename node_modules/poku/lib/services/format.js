"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.showTestResults = exports.getLargestStringLength = exports.format = exports.Formatter = exports.backgroundColor = void 0;
const files_js_1 = require("../configs/files.js");
const indentation_js_1 = require("../configs/indentation.js");
const write_js_1 = require("../services/write.js");
exports.backgroundColor = {
    white: 7,
    black: 40,
    grey: 100,
    red: 41,
    green: 42,
    yellow: 43,
    blue: 44,
    magenta: 45,
    cyan: 46,
    brightRed: 101,
    brightGreen: 102,
    brightYellow: 103,
    brightBlue: 104,
    brightMagenta: 105,
    brightCyan: 106,
};
class Formatter {
    constructor(text) {
        this.parts = '';
        this.text = text;
    }
    static create(text) {
        return new Formatter(text);
    }
    counter(current, total, pad = '0') {
        const totalDigits = String(total).length;
        const formattedCounter = String(current).padStart(totalDigits, pad);
        this.parts += formattedCounter;
        return this;
    }
    dim() {
        this.parts += '\x1b[2m';
        return this;
    }
    bold() {
        this.parts += '\x1b[1m';
        return this;
    }
    underline() {
        this.parts += '\x1b[4m';
        return this;
    }
    info() {
        this.parts += '\x1b[94m';
        return this;
    }
    italic() {
        this.parts += '\x1b[3m';
        return this;
    }
    success() {
        this.parts += '\x1b[32m';
        return this;
    }
    fail() {
        this.parts += '\x1b[91m';
        return this;
    }
    gray() {
        this.parts += '\x1b[90m';
        return this;
    }
    cyan() {
        this.parts += '\x1b[96m';
        return this;
    }
    bg(color) {
        this.parts += `\x1b[${exports.backgroundColor[color]}m\x1b[1m`;
        return this;
    }
    [Symbol.toPrimitive]() {
        return `${this.parts}${this.text}\x1b[0m`;
    }
}
exports.Formatter = Formatter;
const format = (text) => Formatter.create(text);
exports.format = format;
const getLargestStringLength = (arr) => arr.reduce((max, current) => Math.max(max, current.length), 0);
exports.getLargestStringLength = getLargestStringLength;
const showTestResults = () => {
    write_js_1.Write.hr();
    if (files_js_1.fileResults.success.size > 0) {
        write_js_1.Write.log(Array.from(files_js_1.fileResults.success)
            .map(([file, time]) => `${indentation_js_1.indentation.test}${(0, exports.format)('✔').success()} ${(0, exports.format)(`${file} ${(0, exports.format)(`› ${time}ms`).success()}`).dim()}`)
            .join('\n'));
    }
    if (files_js_1.fileResults.fail.size > 0) {
        write_js_1.Write.log(Array.from(files_js_1.fileResults.fail)
            .map(([file, time]) => `${indentation_js_1.indentation.test}${(0, exports.format)('✘').fail()} ${(0, exports.format)(`${file} ${(0, exports.format)(`› ${time}ms`).fail()}`).dim()}`)
            .join('\n'));
    }
};
exports.showTestResults = showTestResults;

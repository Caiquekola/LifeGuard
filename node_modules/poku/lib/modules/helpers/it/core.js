"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.it = void 0;
const node_process_1 = require("process");
const each_js_1 = require("../../../configs/each.js");
const indentation_js_1 = require("../../../configs/indentation.js");
const format_js_1 = require("../../../services/format.js");
const write_js_1 = require("../../../services/write.js");
const todo_js_1 = require("./todo.js");
async function itCore(...args) {
    try {
        let message;
        let cb;
        const isPoku = typeof (node_process_1.env === null || node_process_1.env === void 0 ? void 0 : node_process_1.env.FILE) === 'string' && (node_process_1.env === null || node_process_1.env === void 0 ? void 0 : node_process_1.env.FILE.length) > 0;
        const FILE = node_process_1.env.FILE;
        if (typeof args[0] === 'string') {
            message = args[0];
            cb = args[1];
        }
        else {
            cb = args[0];
        }
        if (message) {
            indentation_js_1.indentation.hasItOrTest = true;
            write_js_1.Write.log(isPoku
                ? `${indentation_js_1.indentation.hasDescribe ? '  ' : ''}${(0, format_js_1.format)(`◌ ${message} › ${(0, format_js_1.format)(`${FILE}`).italic().gray()}`).dim()}`
                : `${indentation_js_1.indentation.hasDescribe ? '  ' : ''}${(0, format_js_1.format)(`◌ ${message}`).dim()}`);
        }
        if (typeof each_js_1.each.before.cb === 'function') {
            const beforeResult = each_js_1.each.before.cb();
            if (beforeResult instanceof Promise) {
                await beforeResult;
            }
        }
        const start = (0, node_process_1.hrtime)();
        const resultCb = cb();
        if (resultCb instanceof Promise) {
            await resultCb;
        }
        const end = (0, node_process_1.hrtime)(start);
        if (typeof each_js_1.each.after.cb === 'function') {
            const afterResult = each_js_1.each.after.cb();
            if (afterResult instanceof Promise) {
                await afterResult;
            }
        }
        if (message) {
            const total = (end[0] * 1e3 + end[1] / 1e6).toFixed(6);
            indentation_js_1.indentation.hasItOrTest = false;
            write_js_1.Write.log(`${indentation_js_1.indentation.hasDescribe ? '  ' : ''}${(0, format_js_1.format)(`● ${message}`).success().bold()} ${(0, format_js_1.format)(`› ${total}ms`).success().dim()}`);
        }
    }
    catch (error) {
        indentation_js_1.indentation.hasItOrTest = false;
        if (typeof each_js_1.each.after.cb === 'function') {
            const afterResult = each_js_1.each.after.cb();
            if (afterResult instanceof Promise) {
                await afterResult;
            }
        }
        throw error;
    }
}
exports.it = Object.assign(itCore, {
    todo: todo_js_1.todo,
});

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.describe = void 0;
const node_process_1 = require("process");
const format_js_1 = require("../../services/format.js");
const write_js_1 = require("../../services/write.js");
const indentation_js_1 = require("../../configs/indentation.js");
const todo_js_1 = require("./it/todo.js");
async function describeCore(arg1, arg2) {
    let title;
    let cb;
    let options;
    const isPoku = typeof (node_process_1.env === null || node_process_1.env === void 0 ? void 0 : node_process_1.env.FILE) === 'string' && (node_process_1.env === null || node_process_1.env === void 0 ? void 0 : node_process_1.env.FILE.length) > 0;
    const FILE = node_process_1.env.FILE;
    if (typeof arg1 === 'string') {
        title = arg1;
        if (typeof arg2 === 'function') {
            cb = arg2;
        }
        else {
            options = arg2;
        }
    }
    else if (typeof arg1 === 'function') {
        cb = arg1;
        options = arg2;
    }
    if (title) {
        indentation_js_1.indentation.hasDescribe = true;
        const { background, icon } = options || {};
        const message = `${cb ? (0, format_js_1.format)('◌').dim() : icon || '☰'} ${cb ? (0, format_js_1.format)(isPoku ? `${title} › ${(0, format_js_1.format)(`${FILE}`).italic().gray()}` : title).dim() : (0, format_js_1.format)(title).bold()}`;
        const noBackground = !background;
        if (noBackground) {
            write_js_1.Write.log((0, format_js_1.format)(message).bold());
        }
        else {
            write_js_1.Write.log((0, format_js_1.format)(` ${message} `).bg(typeof background === 'string' ? background : 'grey'));
        }
    }
    if (typeof cb !== 'function') {
        return;
    }
    const start = (0, node_process_1.hrtime)();
    const resultCb = cb();
    if (resultCb instanceof Promise) {
        await resultCb;
    }
    const end = (0, node_process_1.hrtime)(start);
    if (title) {
        const total = (end[0] * 1e3 + end[1] / 1e6).toFixed(6);
        indentation_js_1.indentation.hasDescribe = false;
        write_js_1.Write.log(`${(0, format_js_1.format)(`● ${title}`).success().bold()} ${(0, format_js_1.format)(`› ${total}ms`).success().dim()}`);
    }
}
exports.describe = Object.assign(describeCore, {
    todo: todo_js_1.todo,
});

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.onSigint = void 0;
exports.poku = poku;
const node_process_1 = __importDefault(require("process"));
const run_tests_js_1 = require("../../services/run-tests.js");
const write_js_1 = require("../../services/write.js");
const exit_js_1 = require("../helpers/exit.js");
const format_js_1 = require("../../services/format.js");
const output_js_1 = require("../../parsers/output.js");
const files_js_1 = require("../../configs/files.js");

const onSigint = () => {
    node_process_1.default.stdout.write('\u001B[?25h');
};
exports.onSigint = onSigint;
node_process_1.default.once('SIGINT', exports.onSigint);
async function poku(targetPaths, configs) {
    let code = 0;
    files_js_1.finalResults.started = new Date();
    const start = node_process_1.default.hrtime();
    const dirs = Array.prototype.concat(targetPaths);
    const showLogs = !(0, output_js_1.isQuiet)(configs);
    
    if (!(configs === null || configs === void 0 ? void 0 : configs.parallel)) {
        for (const dir of dirs) {
            const result = await (0, run_tests_js_1.runTests)(dir, configs);
            if (!result) {
                code = 1;
                if (configs === null || configs === void 0 ? void 0 : configs.failFast) {
                    break;
                }
            }
        }
        if (configs === null || configs === void 0 ? void 0 : configs.noExit) {
            return code;
        }
        const end = node_process_1.default.hrtime(start);
        const total = (end[0] * 1e3 + end[1] / 1e6).toFixed(6);
        files_js_1.finalResults.time = total;
        showLogs && (0, format_js_1.showTestResults)();
        (0, exit_js_1.exit)(code, configs === null || configs === void 0 ? void 0 : configs.quiet);
    }
    
    if (showLogs) {
        write_js_1.Write.hr();
        write_js_1.Write.log(`${(0, format_js_1.format)('Running the Test Suite in Parallel').bold()}\n`);
    }
    try {
        const promises = dirs.map(async (dir) => {
            const result = await (0, run_tests_js_1.runTestsParallel)(dir, configs);
            if (!result && (configs === null || configs === void 0 ? void 0 : configs.failFast)) {
                throw new Error('quiet');
            }
            return result;
        });
        const concurrency = await Promise.all(promises);
        if (concurrency.some((result) => !result)) {
            code = 1;
        }
    }
    catch (_a) {
    }
    finally {
        const end = node_process_1.default.hrtime(start);
        const total = (end[0] * 1e3 + end[1] / 1e6).toFixed(6);
        files_js_1.finalResults.time = total;
    }
    showLogs && (0, format_js_1.showTestResults)();
    if (configs === null || configs === void 0 ? void 0 : configs.noExit) {
        return code;
    }
    (0, exit_js_1.exit)(code, configs === null || configs === void 0 ? void 0 : configs.quiet);
}

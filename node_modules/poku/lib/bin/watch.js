"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startWatch = void 0;
const map_tests_js_1 = require("../services/map-tests.js");
const watch_js_1 = require("../services/watch.js");
const poku_js_1 = require("../modules/essentials/poku.js");
const write_js_1 = require("../services/write.js");
const node_process_1 = __importDefault(require("process"));
const format_js_1 = require("../services/format.js");
const get_arg_js_1 = require("../parsers/get-arg.js");
const files_js_1 = require("../configs/files.js");
const cpus_js_1 = require("../polyfills/cpus.js");
const startWatch = async (dirs, options) => {
    let isRunning = false;
    const watchers = new Set();
    const executing = new Set();
    const interval = Number((0, get_arg_js_1.getArg)('watch-interval')) || 1500;
    const setIsRunning = (value) => {
        isRunning = value;
    };
    const resultsClear = () => {
        files_js_1.fileResults.success.clear();
        files_js_1.fileResults.fail.clear();
    };
    const listenStdin = async (input) => {
        if (isRunning || executing.size > 0) {
            return;
        }
        if (String(input).trim() === 'rs') {
            for (const watcher of watchers) {
                watcher.stop();
            }
            watchers.clear();
            resultsClear();
            await (0, poku_js_1.poku)(dirs, options);
        }
    };
    node_process_1.default.stdin.removeListener('data', listenStdin);
    node_process_1.default.removeListener('SIGINT', poku_js_1.onSigint);
    resultsClear();
    const mappedTests = await (0, map_tests_js_1.mapTests)('.', dirs, options.filter, options.exclude);
    for (const mappedTest of Array.from(mappedTests.keys())) {
        const currentWatcher = (0, watch_js_1.watch)(mappedTest, async (file, event) => {
            var _a;
            if (event === 'change') {
                const filePath = (0, map_tests_js_1.normalizePath)(file);
                if (executing.has(filePath) || isRunning || executing.size > 0) {
                    return;
                }
                setIsRunning(true);
                executing.add(filePath);
                resultsClear();
                const tests = mappedTests.get(filePath);
                if (!tests) {
                    return;
                }
                await (0, poku_js_1.poku)(Array.from(tests), {
                    ...options,
                    concurrency: (_a = options.concurrency) !== null && _a !== void 0 ? _a : Math.max(Math.floor((0, cpus_js_1.availableParallelism)() / 2), 1),
                });
                setTimeout(() => {
                    executing.delete(filePath);
                    setIsRunning(false);
                }, interval);
            }
        });
        currentWatcher.then((watcher) => watchers.add(watcher));
    }
    for (const dir of dirs) {
        const currentWatcher = (0, watch_js_1.watch)(dir, (file, event) => {
            if (event === 'change') {
                if (executing.has(file) || isRunning || executing.size > 0) {
                    return;
                }
                setIsRunning(true);
                executing.add(file);
                resultsClear();
                (0, poku_js_1.poku)(file, options).then(() => {
                    setTimeout(() => {
                        executing.delete(file);
                        setIsRunning(false);
                    }, interval);
                });
            }
        });
        currentWatcher.then((watcher) => watchers.add(watcher));
    }
    write_js_1.Write.hr();
    write_js_1.Write.log(`${(0, format_js_1.format)('Watching:').bold()} ${(0, format_js_1.format)(dirs.join(', ')).underline()}`);
    node_process_1.default.stdin.setEncoding('utf-8');
    node_process_1.default.stdin.on('data', listenStdin);
};
exports.startWatch = startWatch;

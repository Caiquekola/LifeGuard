#! /usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const list_files_js_1 = require("../modules/helpers/list-files.js");
const get_arg_js_1 = require("../parsers/get-arg.js");
const files_js_1 = require("../configs/files.js");
const get_runtime_js_1 = require("../parsers/get-runtime.js");
const format_js_1 = require("../services/format.js");
const kill_js_1 = require("../modules/helpers/kill.js");
const env_js_1 = require("../modules/helpers/env.js");
const poku_js_1 = require("../modules/essentials/poku.js");
const write_js_1 = require("../services/write.js");
const options_js_1 = require("../parsers/options.js");
(async () => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
    if ((0, get_arg_js_1.hasArg)('version') || (0, get_arg_js_1.hasArg)('v', '-')) {
        const { VERSION } = require('../configs/poku.js');
        write_js_1.Write.log(VERSION);
        return;
    }
    const configFile = (0, get_arg_js_1.getArg)('config') || (0, get_arg_js_1.getArg)('c', '-');
    const defaultConfigs = await (0, options_js_1.getConfigs)(configFile);
    const dirs = (() => {
        var _a;
        
        const includeArg = (0, get_arg_js_1.getArg)('include');
        if (includeArg !== undefined) {
            return includeArg.split(',');
        }
        return ((_a = (0, get_arg_js_1.getPaths)('-')) !== null && _a !== void 0 ? _a : ((defaultConfigs === null || defaultConfigs === void 0 ? void 0 : defaultConfigs.include)
            ? Array.prototype.concat(defaultConfigs === null || defaultConfigs === void 0 ? void 0 : defaultConfigs.include)
            : ['.']));
    })();
    const platform = (0, get_arg_js_1.getArg)('platform');
    const filter = (_a = (0, get_arg_js_1.getArg)('filter')) !== null && _a !== void 0 ? _a : defaultConfigs === null || defaultConfigs === void 0 ? void 0 : defaultConfigs.filter;
    const exclude = (_b = (0, get_arg_js_1.getArg)('exclude')) !== null && _b !== void 0 ? _b : defaultConfigs === null || defaultConfigs === void 0 ? void 0 : defaultConfigs.exclude;
    const killPort = (0, get_arg_js_1.getArg)('kill-port');
    const killRange = (0, get_arg_js_1.getArg)('kill-range');
    const killPID = (0, get_arg_js_1.getArg)('kill-pid');
    
    const denoAllow = (_c = (0, get_arg_js_1.argToArray)('deno-allow')) !== null && _c !== void 0 ? _c : (_d = defaultConfigs === null || defaultConfigs === void 0 ? void 0 : defaultConfigs.deno) === null || _d === void 0 ? void 0 : _d.allow;
    const denoDeny = (_e = (0, get_arg_js_1.argToArray)('deno-deny')) !== null && _e !== void 0 ? _e : (_f = defaultConfigs === null || defaultConfigs === void 0 ? void 0 : defaultConfigs.deno) === null || _f === void 0 ? void 0 : _f.deny;
    const denoCJS = ((_g = (0, get_arg_js_1.getArg)('deno-cjs')) === null || _g === void 0 ? void 0 : _g.split(',').map((a) => a.trim()).filter((a) => a)) ||
        (0, get_arg_js_1.hasArg)('deno-cjs') ||
        ((_h = defaultConfigs === null || defaultConfigs === void 0 ? void 0 : defaultConfigs.deno) === null || _h === void 0 ? void 0 : _h.cjs);
    
    const parallel = (0, get_arg_js_1.hasArg)('parallel') || (0, get_arg_js_1.hasArg)('p', '-') || (defaultConfigs === null || defaultConfigs === void 0 ? void 0 : defaultConfigs.parallel);
    const quiet = (0, get_arg_js_1.hasArg)('quiet') || (0, get_arg_js_1.hasArg)('q', '-') || (defaultConfigs === null || defaultConfigs === void 0 ? void 0 : defaultConfigs.quiet);
    const debug = (0, get_arg_js_1.hasArg)('debug') || (0, get_arg_js_1.hasArg)('d', '-') || (defaultConfigs === null || defaultConfigs === void 0 ? void 0 : defaultConfigs.debug);
    const failFast = (0, get_arg_js_1.hasArg)('fail-fast') || (defaultConfigs === null || defaultConfigs === void 0 ? void 0 : defaultConfigs.failFast);
    const watchMode = (0, get_arg_js_1.hasArg)('watch') || (0, get_arg_js_1.hasArg)('w', '-');
    const hasEnvFile = (0, get_arg_js_1.hasArg)('env-file');
    const concurrency = (() => {
        if (!(parallel || (defaultConfigs === null || defaultConfigs === void 0 ? void 0 : defaultConfigs.parallel))) {
            return undefined;
        }
        const value = Number((0, get_arg_js_1.getArg)('concurrency'));
        return Number.isNaN(value) ? defaultConfigs === null || defaultConfigs === void 0 ? void 0 : defaultConfigs.concurrency : value;
    })();
    if (dirs.length === 1) {
        files_js_1.states.isSinglePath = true;
    }
    if ((0, get_arg_js_1.hasArg)('list-files')) {
        const { listFiles } = require('../modules/helpers/list-files.js');
        let total = 0;
        write_js_1.Write.hr();
        for (const dir of dirs) {
            const files = await listFiles(dir, {
                filter: typeof filter === 'string'
                    ? new RegExp((0, list_files_js_1.escapeRegExp)(filter))
                    : filter,
                exclude: typeof exclude === 'string'
                    ? new RegExp((0, list_files_js_1.escapeRegExp)(exclude))
                    : exclude,
            });
            total += files.length;
            write_js_1.Write.log(files.map((file) => `${(0, format_js_1.format)('-').dim()} ${file}`).join('\n'));
        }
        write_js_1.Write.hr();
        write_js_1.Write.log(`Total test files: ${(0, format_js_1.format)(String(total)).bold()}`);
        write_js_1.Write.hr();
        return;
    }
    const tasks = [];
    
    if (killPort || ((_j = defaultConfigs === null || defaultConfigs === void 0 ? void 0 : defaultConfigs.kill) === null || _j === void 0 ? void 0 : _j.port)) {
        const ports = (killPort === null || killPort === void 0 ? void 0 : killPort.split(',').map(Number)) || ((_k = defaultConfigs === null || defaultConfigs === void 0 ? void 0 : defaultConfigs.kill) === null || _k === void 0 ? void 0 : _k.port) || [];
        tasks.push(kill_js_1.kill.port(ports));
    }
    if (killRange || ((_l = defaultConfigs === null || defaultConfigs === void 0 ? void 0 : defaultConfigs.kill) === null || _l === void 0 ? void 0 : _l.range)) {
        const ranges = (killRange === null || killRange === void 0 ? void 0 : killRange.split(',')) ||
            ((_o = (_m = defaultConfigs === null || defaultConfigs === void 0 ? void 0 : defaultConfigs.kill) === null || _m === void 0 ? void 0 : _m.range) === null || _o === void 0 ? void 0 : _o.map((range) => `${range[0]}-${range[1]}`)) ||
            [];
        for (const range of ranges) {
            const ports = range.split('-').map(Number);
            const startsAt = ports[0];
            const endsAt = ports[1];
            tasks.push(kill_js_1.kill.range(startsAt, endsAt));
        }
    }
    if (killPID || ((_p = defaultConfigs === null || defaultConfigs === void 0 ? void 0 : defaultConfigs.kill) === null || _p === void 0 ? void 0 : _p.pid)) {
        const PIDs = (killPID === null || killPID === void 0 ? void 0 : killPID.split(',').map(Number)) || ((_q = defaultConfigs === null || defaultConfigs === void 0 ? void 0 : defaultConfigs.kill) === null || _q === void 0 ? void 0 : _q.pid) || [];
        tasks.push(kill_js_1.kill.pid(PIDs));
    }
    
    if (hasEnvFile || (defaultConfigs === null || defaultConfigs === void 0 ? void 0 : defaultConfigs.envFile)) {
        const envFilePath = (_r = (0, get_arg_js_1.getArg)('env-file')) !== null && _r !== void 0 ? _r : defaultConfigs === null || defaultConfigs === void 0 ? void 0 : defaultConfigs.envFile;
        tasks.push((0, env_js_1.envFile)(envFilePath));
    }
    const options = {
        
        platform: (0, get_runtime_js_1.platformIsValid)(platform)
            ? platform
            : (0, get_arg_js_1.hasArg)('node')
                ? 'node'
                : (0, get_arg_js_1.hasArg)('bun')
                    ? 'bun'
                    : (0, get_arg_js_1.hasArg)('deno')
                        ? 'deno'
                        : (0, get_runtime_js_1.platformIsValid)(defaultConfigs === null || defaultConfigs === void 0 ? void 0 : defaultConfigs.platform)
                            ? defaultConfigs === null || defaultConfigs === void 0 ? void 0 : defaultConfigs.platform
                            : undefined,
        filter: typeof filter === 'string' ? new RegExp((0, list_files_js_1.escapeRegExp)(filter)) : filter,
        exclude: typeof exclude === 'string' ? new RegExp((0, list_files_js_1.escapeRegExp)(exclude)) : exclude,
        parallel,
        concurrency,
        quiet,
        debug,
        failFast,
        deno: {
            allow: denoAllow,
            deny: denoDeny,
            cjs: denoCJS,
        },
        noExit: watchMode,
        beforeEach: 'beforeEach' in defaultConfigs ? defaultConfigs.beforeEach : undefined,
        afterEach: 'afterEach' in defaultConfigs ? defaultConfigs.afterEach : undefined,
    };
    if (debug || (defaultConfigs === null || defaultConfigs === void 0 ? void 0 : defaultConfigs.debug)) {
        write_js_1.Write.hr();
        write_js_1.Write.log(`${(0, format_js_1.format)(' Debug Enabled ').bg('brightBlue')}\n`);
        write_js_1.Write.log(`${(0, format_js_1.format)('…').info().italic()} ${(0, format_js_1.format)('Paths').bold()}`);
        console.table(dirs);
        write_js_1.Write.log('\n');
        write_js_1.Write.log(`${(0, format_js_1.format)('…').info().italic()} ${(0, format_js_1.format)('Options').bold()}`);
        console.dir(options, { depth: null, colors: true });
    }
    await Promise.all(tasks);
    await (0, poku_js_1.poku)(dirs, options);
    if (watchMode) {
        const { startWatch } = require('./watch.js');
        await startWatch(dirs, options);
    }
})();

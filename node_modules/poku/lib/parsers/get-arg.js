"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.argToArray = exports.getPaths = exports.hasArg = exports.getArg = void 0;
const node_process_1 = require("process");
const [, , ...processArgs] = node_process_1.argv;
const regexQuotes = /''|""/;
const getArg = (arg, prefix = '--', baseArgs = processArgs) => {
    const argPattern = `${prefix}${arg}=`;
    const argValue = baseArgs.find((a) => a.startsWith(argPattern));
    if (!argValue) {
        return undefined;
    }
    return argValue.slice(argPattern.length).replace(regexQuotes, '');
};
exports.getArg = getArg;
const hasArg = (arg, prefix = '--', baseArgs = processArgs) => {
    const argPattern = `${prefix}${arg}`;
    return baseArgs.some((a) => a.startsWith(argPattern));
};
exports.hasArg = hasArg;
const getPaths = (prefix = '--', baseArgs = processArgs) => {
    let hasPaths = false;
    const paths = [];
    for (const arg of baseArgs) {
        if (!arg.startsWith(prefix)) {
            hasPaths = true;
            const parts = arg.split(',');
            for (const part of parts) {
                paths.push(part);
            }
        }
    }
    return hasPaths ? paths : undefined;
};
exports.getPaths = getPaths;
const argToArray = (arg, prefix = '--', baseArgs = processArgs) => {
    const hasArgument = (0, exports.hasArg)(arg, prefix, baseArgs);
    if (!hasArgument) {
        return undefined;
    }
    const argValue = (0, exports.getArg)(arg, prefix, baseArgs);
    if (!argValue) {
        return [];
    }
    return argValue
        .split(',')
        .map((a) => a.trim())
        .filter((a) => a);
};
exports.argToArray = argToArray;
